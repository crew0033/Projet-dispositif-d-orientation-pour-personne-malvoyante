#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

#define LED_BUILTIN 2  // GPIO de la LED interne

BLEServer* pServer = NULL;
bool deviceConnected = false;

#define SERVICE_UUID        "12345678-1234-5678-1234-56789abcdef0"
#define CHARACTERISTIC_UUID "87654321-4321-6789-4321-6789abcdef01"

class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
        Serial.println("ESP32_B connecté !");
        deviceConnected = true;
        digitalWrite(LED_BUILTIN, HIGH);  // Allumer LED quand connecté
    }

    void onDisconnect(BLEServer* pServer) {
        Serial.println("ESP32_B déconnecté !");
        deviceConnected = false;
        digitalWrite(LED_BUILTIN, LOW);  // Éteindre LED quand déconnecté
    }
};

void setup() {
    Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, LOW);

    BLEDevice::init("ESP32_A");
    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    BLEService *pService = pServer->createService(SERVICE_UUID);
    BLECharacteristic *pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY
    );
    pCharacteristic->setValue("Hello ESP32_B");
    pService->start();

    BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(SERVICE_UUID);
    pAdvertising->start();
}

void loop() {
    delay(2000);
}

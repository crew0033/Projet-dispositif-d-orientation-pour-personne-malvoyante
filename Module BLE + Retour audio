#include <Arduino.h>
#include <HardwareSerial.h>
#include <DFRobotDFPlayerMini.h>
#include <BLEDevice.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

// DÃ©finition des broches pour le DFPlayer Mini
#define DFPLAYER_RX 16
#define DFPLAYER_TX 17
#define LED_BUILTIN 2

// DÃ©claration des objets nÃ©cessaires
HardwareSerial mySoftwareSerial(1);
DFRobotDFPlayerMini myDFPlayer;      // Instance du lecteur audio DFPlayer Mini
BLEScan* pBLEScan;                   // Pointeur pour le scan BLE
BLEServer* pServer = NULL;           // Serveur BLE
bool deviceDetected = false;         // Indique si un appareil BLE a Ã©tÃ© dÃ©tectÃ©
bool audioPlaying = false;           // Indique si un fichier audio est en cours de lecture
bool deviceConnected = false;        // Indique si une connexion BLE est active

#define SERVICE_UUID "12345678-1234-5678-1234-56789abcdef0"
#define CHARACTERISTIC_UUID "87654321-4321-6789-4321-6789abcdef01"

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
public:
    void onResult(BLEAdvertisedDevice advertisedDevice) override {
        deviceDetected = true;
        Serial.print("Appareil BLE dÃ©tectÃ© ! Adresse MAC: ");
        Serial.println(advertisedDevice.getAddress().toString().c_str());
    }
};

class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) override {
        Serial.println("ESP32_B connectÃ© !");
        deviceConnected = true;
        digitalWrite(LED_BUILTIN, HIGH); // Allumer la LED Ã  la connexion
    }

    void onDisconnect(BLEServer* pServer) override {
        Serial.println("ESP32_B dÃ©connectÃ© !");
        deviceConnected = false;
        digitalWrite(LED_BUILTIN, LOW);  // Ã‰teindre la LED Ã  la dÃ©connexion
    }
};

void setup() {
    Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, LOW);

    mySoftwareSerial.begin(9600, SERIAL_8N1, DFPLAYER_RX, DFPLAYER_TX);
    if (!myDFPlayer.begin(mySoftwareSerial)) {
        Serial.println("Erreur DFPlayer Mini !");
        while (true); // Boucle infinie en cas dâ€™Ã©chec
    }
    Serial.println("DFPlayer prÃªt !");
    myDFPlayer.volume(40); // RÃ©glage du volume

    // Initialisation du module BLE pour le scan
    BLEDevice::init("ESP32_BLE_Scanner");
    pBLEScan = BLEDevice::getScan();
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
    pBLEScan->setActiveScan(true); // Scan actif (demande plus d'Ã©nergie mais plus prÃ©cis)
    pBLEScan->setInterval(100);    // Intervalle entre les scans
    pBLEScan->setWindow(99);       // DurÃ©e de chaque scan

    // Configuration du serveur BLE et des services/caractÃ©ristiques
    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    // CrÃ©ation dâ€™un service BLE avec une caractÃ©ristique
    BLEService *pService = pServer->createService(SERVICE_UUID);
    BLECharacteristic *pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY
    );
    pCharacteristic->setValue("Hello ESP32_B");
    pService->start();

    // DÃ©marrage de la publicitÃ© BLE
    BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(SERVICE_UUID);
    pAdvertising->start();
}

void loop() {
    Serial.println("Scan BLE en cours...");
    deviceDetected = false;

    // Lancer un scan BLE pendant 5 secondes
    pBLEScan->start(5, false);

    // Si un appareil BLE est dÃ©tectÃ© et quâ€™aucun son nâ€™est en cours de lecture
    if (deviceDetected && !audioPlaying) {
        digitalWrite(LED_BUILTIN, HIGH); // Allumer la LED
        Serial.println("Lecture de 001.mp3...");
        myDFPlayer.play(1); // Lecture du fichier audio 001.mp3
        audioPlaying = true;
    }

    // VÃ©rifie si la lecture est terminÃ©e
    if (audioPlaying && myDFPlayer.readState() == 0) {
        digitalWrite(LED_BUILTIN, LOW); // Ã‰teindre la LED
        Serial.println("ðŸ”‡ Audio terminÃ©, LED Ã©teinte.");
        audioPlaying = false;
    }

    delay(2000); // Pause avant le prochain scan
}
